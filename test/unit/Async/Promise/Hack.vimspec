
Describe Async.Promise.Hack
  Before all
    let Promise0 = vital#vital#import('Async.Promise')
    let Promise = vital#vital#import('Async.Promise.Hack')
    let E = Promise.get_default_error_handler()
    call Promise.set_debug(1)
    call Promise.set_timeout(1)
    let sleep_time = has('win32') ? '100m' : '10m'
  End

  Describe .new()
    It echos throwed error
      redir => mes
        call Promise.new({resolve, reject -> [execute("throw 'error from throw'"), 0][-1]})
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\C<Promise Uncaught Exception> error from throw')
      " Check called just once
      Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
    End
    Context echos object itself in special case
      It is the case throwpoint is list
        redir => mes
          call Promise.new({resolve, reject -> reject({'throwpoint': [], 'exception': [], 'val': 1})})
          exe 'sleep' sleep_time
        redir END
        Assert Match(mes, '\C''val'': 1')
        Assert Match(mes, '\C<Promise Uncaught> ')
        " Check called just once
        Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
      End
      It is the case throwpoint is string
        redir => mes
          call Promise.new({resolve, reject -> reject({'throwpoint': '', 'exception': [], 'val': 1})})
          exe 'sleep' sleep_time
        redir END
        Assert Match(mes, '\CError detected while processing')
        Assert Match(mes, '\C''val'': 1')
        Assert Match(mes, '\C<Promise Uncaught> ')
        " Check called just once
        Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
      End
      It is the case throwpoint and exception is string
        redir => mes
          call Promise.new({resolve, reject -> reject({'throwpoint': '', 'exception': '', 'val': 1})})
          exe 'sleep' sleep_time
        redir END
        Assert Match(mes, '\CError detected while processing')
        Assert Match(mes, '\C''val'': 1')
        Assert Match(mes, '\C<Promise Uncaught> ')
        " Check called just once
        Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
      End
    End
    It echos rejected error
      redir => mes
        call Promise.new({resolve, reject -> [reject('reject from new'), 0][-1]})
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\Creject from new')
      " Check called just once
      Assert NotMatch(mes, repeat('\C<Promise Uncaught> reject from new.*', 2))
    End
    It not block .catch by user
      let handled_myself = 0
      redir => mes
        call Promise.new({resolve, reject -> [execute("throw 'error from throw'"), 0][-1]})
              \.catch({-> [handled_myself, execute('let handled_myself = 1')]})
        exe 'sleep' sleep_time
      redir END
      Assert NotMatch(mes, '\CError detected while processing')
      Assert NotMatch(mes, '\Cerror from throw')
      Assert Equals(handled_myself, 1)
    End
    It helps the case the user failed to handle error by himself
      redir => mes
        call Promise.new({resolve, reject -> [execute("throw 'error for user'"), 0][-1]})
              \.catch({-> [execute("throw 'failed to handle'")]})
        exe 'sleep' sleep_time
      redir END
      Assert NotMatch(mes, '\Cerror for user')
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\Cfailed to handle')
    End
  End

  Describe .resolve()
    It hacks .then()
      function! s:_test() abort
        _bar
      endfunction
      redir => mes
        call Promise.resolve('foo')
              \.then({val -> s:_test()})
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\C<Promise Uncaught Exception> ')
      Assert Match(mes, '\C_bar')
      " Check called just once
      Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
    End
  End

  Describe .reject()
    It echos rejected error
      redir => mes
        call Promise.reject('reject from Promise.reject()')
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\Creject from Promise.reject()')
      " Check called just once
      Assert NotMatch(mes, repeat('\Creject from Promise.reject().*', 2))
    End
  End

  Describe .set_error_handler()
    It can set handler
      function! s:handler(ex) abort
        echomsg string(a:ex)
      endfunction
      call Promise.set_error_handler(function('s:handler'))
      redir => mes
        call Promise.reject('error from reject')
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\Cerror from reject')
      " Check called once
      Assert NotMatch(mes, repeat('\Cerror from reject.*', 2))

      " Make handler default
      call Promise.set_error_handler(v:null)
      redir => mes
        call Promise.reject('error from reject')
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\Cerror from reject')

      " Check called once
      Assert NotMatch(mes, repeat('\Cerror from reject.*', 2))
    End
  End

  Describe .get_default_error_handler()
    It provides useful error handler
      redir => mes
        call Promise0.resolve('foo')
              \.then({val -> execute('_bar')})
              \.catch(E)
        exe 'sleep' sleep_time
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\C_bar')
      " Check called once
      Assert NotMatch(mes, repeat('\C_bar.*', 2))
    End
  End

  It extends promise features
    for key in keys(Promise0)
      if type(Promise0[key]) == v:t_func
        call themis#log('      + Extend Check : ' . key)
        Assert True(has_key(Promise, key))
      endif
    endfor
  End
End

