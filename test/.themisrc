set encoding=utf-8

if $THEMIS_PROFILE !=# ''
  exe 'profile start' $THEMIS_PROFILE
  profile! file ./autoload/*
endif

let s:verbose = 1
if $TEST_THEMIS_VERBOSE !=# ''
  silent! let s:verbose = str2nr($TEST_THEMIS_VERBOSE)
endif

try
  language message C
catch
endtry
set helplang=en
filetype plugin on

let s:vital_dir = resolve(expand('<sfile>:p:h') . '/../.dev/vital.vim')
if !isdirectory(s:vital_dir)
  if executable('git')
    call mkdir(resolve(s:vital_dir . '/..'), 'p')
    exe '!git clone https://github.com/vim-jp/vital.vim' s:vital_dir
  endif
endif

call themis#option('runtimepath', s:vital_dir)
let s:assert = themis#helper('assert')

call themis#option('recursive', 1)
call themis#option('reporter', 'spec')
call themis#helper('command').with(s:assert)

let s:check_values = [
      \   "--",
      \   "split(execute('ve'),\"\\n\")[0]",
      \   "v:version",
      \   "has('nvim')",
      \   "--",
      \ ]


let s:maxlen = max(map(copy(s:check_values), 'len(v:val)'))
for s:vals in s:check_values
  if s:vals ==# '--'
    call themis#log('------------------------------------------')
  else
    call themis#log(s:vals . ':' . repeat(' ', s:maxlen + 4 - len(s:vals)) . '%s', eval(s:vals))
  endif
endfor

function! Dump(data, filename) abort
  if !s:verbose | return | endif
  try
    call writefile(a:data, a:filename)
  catch /.*/
    call themis#log('[Warning] Dump was failed.')
    call themis#log('[Warning] Exception: ' . v:exception)
  endtry
endfunction

function! AssertSnapshot(data, dir, filename) abort
  let out = resolve(a:dir . '/out/' . a:filename)
  let exp = resolve(a:dir . '/expected/' . a:filename)

  call mkdir(fnamemodify(out, ':p:h'), 'p')
  call mkdir(fnamemodify(exp, ':p:h'), 'p')

  call writefile([json_encode(a:data)], out)

  if !filereadable(exp)
    call writefile([json_encode(a:data)], exp)
  endif

  let exp_data = json_decode(join(readfile(exp), ''))

  let g:_cached_data = a:data
  let g:_cached_exp_data = exp_data
  
  return 'Assert Equals(g:_cached_data, g:_cached_exp_data)'
endfunction

